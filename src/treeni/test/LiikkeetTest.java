package treeni.test;
// Generated by ComTest BEGIN
import treeni.*;
import java.util.*;
import java.io.File;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2023.01.06 00:07:28 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class LiikkeetTest {
    //



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa50 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa50() throws SailoException, CloneNotSupportedException {    // Liikkeet: 50
    Liikkeet liikkeet = new Liikkeet(); 
    Liike liike1 = new Liike(), liike2 = new Liike(); 
    liike1.kirjaa(); liike2.kirjaa(); 
    assertEquals("From: Liikkeet line: 57", 0, liikkeet.getLkm()); 
    liikkeet.korvaaTaiLisaa(liike1); assertEquals("From: Liikkeet line: 58", 1, liikkeet.getLkm()); 
    liikkeet.korvaaTaiLisaa(liike2); assertEquals("From: Liikkeet line: 59", 2, liikkeet.getLkm()); 
    Liike liike3 = liike1.clone(); 
    liike3.aseta(3, "kkk"); 
    Iterator<Liike> i2 = liikkeet.iterator(); 
    assertEquals("From: Liikkeet line: 63", liike1, i2.next()); 
    liikkeet.korvaaTaiLisaa(liike3); assertEquals("From: Liikkeet line: 64", 2, liikkeet.getLkm()); 
    i2 = liikkeet.iterator(); 
    Liike l = i2.next(); 
    assertEquals("From: Liikkeet line: 67", liike3, l); 
    assertEquals("From: Liikkeet line: 68", true, l == liike3); 
    assertEquals("From: Liikkeet line: 69", false, l == liike1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista92 
   * @throws SailoException when error
   */
  @Test
  public void testPoista92() throws SailoException {    // Liikkeet: 92
    Liikkeet liikkeet = new Liikkeet(); 
    Liike dippi21 = new Liike(); dippi21.TaytaLiikeTiedoilla(2); 
    Liike dippi11 = new Liike(); dippi11.TaytaLiikeTiedoilla(1); 
    Liike dippi22 = new Liike(); dippi22.TaytaLiikeTiedoilla(2); 
    Liike dippi12 = new Liike(); dippi12.TaytaLiikeTiedoilla(1); 
    Liike dippi23 = new Liike(); dippi23.TaytaLiikeTiedoilla(2); 
    liikkeet.lisaa(dippi21); 
    liikkeet.lisaa(dippi11); 
    liikkeet.lisaa(dippi22); 
    liikkeet.lisaa(dippi12); 
    assertEquals("From: Liikkeet line: 105", false, liikkeet.poista(dippi23)); assertEquals("From: Liikkeet line: 105", 4, liikkeet.getLkm()); 
    assertEquals("From: Liikkeet line: 106", true, liikkeet.poista(dippi11)); assertEquals("From: Liikkeet line: 106", 3, liikkeet.getLkm()); 
    List<Liike> l = liikkeet.annaLiikkeet(1); 
    assertEquals("From: Liikkeet line: 108", 1, l.size()); 
    assertEquals("From: Liikkeet line: 109", dippi12, l.get(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaSuorituksenLiikkeet124 */
  @Test
  public void testPoistaSuorituksenLiikkeet124() {    // Liikkeet: 124
    Liikkeet liikkeet = new Liikkeet(); 
    Liike dippi21 = new Liike(); dippi21.TaytaLiikeTiedoilla(2); 
    Liike dippi11 = new Liike(); dippi11.TaytaLiikeTiedoilla(1); 
    Liike dippi22 = new Liike(); dippi22.TaytaLiikeTiedoilla(2); 
    Liike dippi12 = new Liike(); dippi12.TaytaLiikeTiedoilla(1); 
    Liike dippi23 = new Liike(); dippi23.TaytaLiikeTiedoilla(2); 
    liikkeet.lisaa(dippi21); 
    liikkeet.lisaa(dippi11); 
    liikkeet.lisaa(dippi22); 
    liikkeet.lisaa(dippi12); 
    liikkeet.lisaa(dippi23); 
    assertEquals("From: Liikkeet line: 136", 3, liikkeet.poistaSuorituksenLiikkeet(2)); assertEquals("From: Liikkeet line: 136", 2, liikkeet.getLkm()); 
    assertEquals("From: Liikkeet line: 137", 0, liikkeet.poistaSuorituksenLiikkeet(3)); assertEquals("From: Liikkeet line: 137", 2, liikkeet.getLkm()); 
    List<Liike> l = liikkeet.annaLiikkeet(2); 
    assertEquals("From: Liikkeet line: 139", 0, l.size()); 
    l = liikkeet.annaLiikkeet(1); 
    assertEquals("From: Liikkeet line: 141", dippi11, l.get(0)); 
    assertEquals("From: Liikkeet line: 142", dippi12, l.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaLiikkeet165 */
  @Test
  public void testAnnaLiikkeet165() {    // Liikkeet: 165
    Liikkeet liikkeet = new Liikkeet(); 
    Liike dippi21 = new Liike(2); liikkeet.lisaa(dippi21); 
    Liike dippi11 = new Liike(1); liikkeet.lisaa(dippi11); 
    Liike dippi22 = new Liike(2); liikkeet.lisaa(dippi22); 
    Liike dippi12 = new Liike(1); liikkeet.lisaa(dippi12); 
    Liike dippi23 = new Liike(2); liikkeet.lisaa(dippi23); 
    Liike dippi51 = new Liike(5); liikkeet.lisaa(dippi51); 
    List<Liike> loytyneet; 
    loytyneet = liikkeet.annaLiikkeet(3); 
    assertEquals("From: Liikkeet line: 176", 0, loytyneet.size()); 
    loytyneet = liikkeet.annaLiikkeet(1); 
    assertEquals("From: Liikkeet line: 178", 2, loytyneet.size()); 
    assertEquals("From: Liikkeet line: 179", true, loytyneet.get(0) == dippi11); 
    assertEquals("From: Liikkeet line: 180", true, loytyneet.get(1) == dippi12); 
    loytyneet = liikkeet.annaLiikkeet(5); 
    assertEquals("From: Liikkeet line: 182", 1, loytyneet.size()); 
    assertEquals("From: Liikkeet line: 183", true, loytyneet.get(0) == dippi51); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta199 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta199() throws SailoException {    // Liikkeet: 199
    Liikkeet liikkeet = new Liikkeet(); 
    Liike dippi21 = new Liike(); dippi21.TaytaLiikeTiedoilla(2); 
    Liike dippi11 = new Liike(); dippi11.TaytaLiikeTiedoilla(1); 
    Liike dippi22 = new Liike(); dippi22.TaytaLiikeTiedoilla(2); 
    Liike dippi12 = new Liike(); dippi12.TaytaLiikeTiedoilla(1); 
    Liike dippi23 = new Liike(); dippi23.TaytaLiikeTiedoilla(2); 
    String tiedNimi = "treeni"; 
    File ftied = new File(tiedNimi + "/liikkeet.dat"); 
    ftied.delete(); 
    try {
    liikkeet.lueTiedostosta(tiedNimi); 
    fail("Liikkeet: 211 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    liikkeet.lisaa(dippi21); 
    liikkeet.lisaa(dippi11); 
    liikkeet.lisaa(dippi22); 
    liikkeet.lisaa(dippi12); 
    liikkeet.lisaa(dippi23); 
    liikkeet.tallenna(tiedNimi); 
    liikkeet = new Liikkeet(); 
    liikkeet.lueTiedostosta(tiedNimi); 
    Iterator<Liike> i = liikkeet.iterator(); 
    assertEquals("From: Liikkeet line: 221", dippi21.toString(), i.next().toString()); 
    assertEquals("From: Liikkeet line: 222", dippi11.toString(), i.next().toString()); 
    assertEquals("From: Liikkeet line: 223", dippi22.toString(), i.next().toString()); 
    assertEquals("From: Liikkeet line: 224", dippi12.toString(), i.next().toString()); 
    assertEquals("From: Liikkeet line: 225", dippi23.toString(), i.next().toString()); 
    assertEquals("From: Liikkeet line: 226", false, i.hasNext()); 
    liikkeet.lisaa(dippi23); 
    liikkeet.tallenna(tiedNimi); 
    assertEquals("From: Liikkeet line: 229", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator329 */
  @Test
  public void testIterator329() {    // Liikkeet: 329
    Liikkeet liikkeet = new Liikkeet(); 
    Liike dippi21 = new Liike(2); liikkeet.lisaa(dippi21); 
    Liike dippi11 = new Liike(1); liikkeet.lisaa(dippi11); 
    Liike dippi22 = new Liike(2); liikkeet.lisaa(dippi22); 
    Liike dippi12 = new Liike(1); liikkeet.lisaa(dippi12); 
    Liike dippi23 = new Liike(2); liikkeet.lisaa(dippi23); 
    Iterator<Liike> i2 = liikkeet.iterator(); 
    assertEquals("From: Liikkeet line: 338", dippi21, i2.next()); 
    assertEquals("From: Liikkeet line: 339", dippi11, i2.next()); 
    assertEquals("From: Liikkeet line: 340", dippi22, i2.next()); 
    assertEquals("From: Liikkeet line: 341", dippi12, i2.next()); 
    assertEquals("From: Liikkeet line: 342", dippi23, i2.next()); 
    try {
    assertEquals("From: Liikkeet line: 343", dippi12, i2.next()); 
    fail("Liikkeet: 343 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for (Liike liik : liikkeet) {
    assertEquals("From: Liikkeet line: 349", jnrot[n], liik.getLiikeNro()); n++; 
    }
    assertEquals("From: Liikkeet line: 352", 5, n); 
  } // Generated by ComTest END
}